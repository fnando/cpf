{"version":3,"file":"cpf.umd.js","sources":["../src/cpf.js"],"sourcesContent":["// Blacklist common values.\nconst BLACKLIST = [\n  \"00000000000\",\n  \"11111111111\",\n  \"22222222222\",\n  \"33333333333\",\n  \"44444444444\",\n  \"55555555555\",\n  \"66666666666\",\n  \"77777777777\",\n  \"88888888888\",\n  \"99999999999\",\n  \"12345678909\"\n];\n\nconst STRICT_STRIP_REGEX = /[.-]/g;\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\n\nexport function verifierDigit(numbers) {\n  numbers = numbers\n    .split(\"\")\n    .map(function(number){ return parseInt(number, 10); })\n  ;\n\n  const modulus = numbers.length + 1;\n\n  const multiplied = numbers.map(function(number, index) {\n    return number * (modulus - index);\n  });\n\n  const mod = multiplied.reduce(function(buffer, number){\n    return buffer + number;\n  }) % 11;\n\n  return (mod < 2 ? 0 : 11 - mod);\n}\n\nexport function format(number) {\n  return strip(number).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, \"$1.$2.$3-$4\");\n}\n\nexport function strip(number, strict) {\n  const regex = strict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n  return (number || \"\").toString().replace(regex, \"\");\n}\n\nexport function isValid(number, strict) {\n  const stripped = strip(number, strict);\n\n  // CPF must be defined\n  if (!stripped) { return false; }\n\n  // CPF must have 11 chars\n  if (stripped.length !== 11) { return false; }\n\n  // CPF can't be blacklisted\n  if (BLACKLIST.includes(stripped)) { return false; }\n\n  let numbers = stripped.substr(0, 9);\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n\n  return numbers.substr(-2) === stripped.substr(-2);\n}\n\nexport function generate(formatted) {\n  let numbers = \"\";\n\n  for (let i = 0; i < 9; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n\n  return (formatted ? format(numbers) : numbers);\n}\n"],"names":["const","BLACKLIST","STRICT_STRIP_REGEX","LOOSE_STRIP_REGEX","verifierDigit","numbers","modulus","split","map","number","parseInt","length","mod","index","reduce","buffer","format","strip","replace","strict","regex","toString","stripped","includes","let","substr","formatted","i","Math","floor","random"],"mappings":"yKACAA,IAAMC,GACJ,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eAGIC,EAAqB,QACrBC,EAAoB,SAE1B,SAAgBC,EAAcC,GAM5BL,IAAMM,GALND,EAAUA,EACPE,MAAM,IACNC,IAAI,SAASC,GAAS,OAAOC,SAASD,EAAQ,OAGzBE,OAAS,EAM3BC,EAJaP,EAAQG,IAAI,SAASC,EAAQI,GAC9C,OAAOJ,GAAUH,EAAUO,KAGNC,OAAO,SAASC,EAAQN,GAC7C,OAAOM,EAASN,IACb,GAEL,OAAQG,EAAM,EAAI,EAAI,GAAKA,EAG7B,SAAgBI,EAAOP,GACrB,OAAOQ,EAAMR,GAAQS,QAAQ,iCAAkC,eAGjE,SAAgBD,EAAMR,EAAQU,GAC5BnB,IAAMoB,EAAQD,EAASjB,EAAqBC,EAC5C,OAAQM,GAAU,IAAIY,WAAWH,QAAQE,EAAO,qDAGlD,SAAwBX,EAAQU,GAC9BnB,IAAMsB,EAAWL,EAAMR,EAAQU,GAG/B,IAAKG,EAAY,OAAO,EAGxB,GAAwB,KAApBA,EAASX,OAAiB,OAAO,EAGrC,GAAIV,EAAUsB,SAASD,GAAa,OAAO,EAE3CE,IAAInB,EAAUiB,EAASG,OAAO,EAAG,GAIjC,OAHApB,GAAWD,EAAcC,IACzBA,GAAWD,EAAcC,IAEVoB,QAAQ,KAAOH,EAASG,QAAQ,eAGjD,SAAyBC,GAGvB,IAFAF,IAAInB,EAAU,GAELsB,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1BtB,GAAWuB,KAAKC,MAAsB,EAAhBD,KAAKE,UAM7B,OAHAzB,GAAWD,EAAcC,GACzBA,GAAWD,EAAcC,GAEjBqB,EAAYV,EAAOX,GAAWA"}