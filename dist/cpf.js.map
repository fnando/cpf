{"version":3,"sources":["webpack://cpf/webpack/bootstrap","webpack://cpf/./src/cpf.js"],"names":["verifierDigit","format","strip","isValid","generate","BLACKLIST","STRICT_STRIP_REGEX","LOOSE_STRIP_REGEX","numbers","split","map","number","parseInt","modulus","length","multiplied","index","mod","reduce","buffer","cpf","replace","isStrict","regex","toString","stripped","includes","substr","useFormat","i","Math","floor","random"],"mappings":"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","file":"cpf.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/cpf.js\");\n","// Blacklist common values.\nconst BLACKLIST = [\n  \"00000000000\",\n  \"11111111111\",\n  \"22222222222\",\n  \"33333333333\",\n  \"44444444444\",\n  \"55555555555\",\n  \"66666666666\",\n  \"77777777777\",\n  \"88888888888\",\n  \"99999999999\",\n  \"12345678909\"\n];\n\nconst STRICT_STRIP_REGEX = /[.-]/g;\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\n\n/**\n * Compute the Verifier Digit (or \"DÃ­gito Verificador (DV)\" in PT-BR).\n *\n * You can learn more about the algorithm on [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)\n *\n * @export\n * @param {string} numbers a string with only numbers.\n * @returns {number} the verifier digit.\n */\nexport function verifierDigit(numbers) {\n  numbers = numbers\n    .split(\"\")\n    .map(function(number){ return parseInt(number, 10); })\n  ;\n\n  const modulus = numbers.length + 1;\n\n  const multiplied = numbers.map(function(number, index) {\n    return number * (modulus - index);\n  });\n\n  const mod = multiplied.reduce(function(buffer, number){\n    return buffer + number;\n  }) % 11;\n\n  return (mod < 2 ? 0 : 11 - mod);\n}\n\n/**\n * Transform the input into a pretty CPF format.\n *\n * Example:\n * ```\n * format('12345678901');\n * // Result: '123.456.789-01'\n * ```\n *\n * @export\n * @param {string} cpf the CPF.\n * @returns {string} the formatted CPF.\n */\nexport function format(cpf) {\n  return strip(cpf).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, \"$1.$2.$3-$4\");\n}\n\n/**\n * Remove some characters from the `number` input.\n *\n * Example:\n * ```\n * strip('29537995593'); // Result: '29537995593'\n * strip('295.379.955-93'); // Result: '29537995593'\n * strip('295a379b9c5d59e3'); // Result: '29537995593'\n * strip('295a379b9c5d59e3', true); // Result: '295a379b9c5d59e3' - Atention!\n * ```\n *\n * @export\n * @param {string} cpf the CPF text.\n * @param {boolean} [isStrict] if `true`, it will remove only `.` and `-` characters.\n *                             Otherwise, it will remove all non-digit (`[^\\d]`) characters. Optional.\n * @returns {string} the stripped CPF.\n */\nexport function strip(cpf, isStrict) {\n  const regex = isStrict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n  return (cpf || \"\").toString().replace(regex, \"\");\n}\n\n/**\n * Validate the CPF.\n *\n * @export\n * @param {string} cpf the CPF number.\n * @param {boolean} [isStrict] if `true`, it will accept only `digits`, `.` and `-` characters. Optional.\n * @returns {boolean} `true` if CPF is valid. Otherwise, `false`.\n */\nexport function isValid(cpf, isStrict) {\n  const stripped = strip(cpf, isStrict);\n\n  // CPF must be defined\n  if (!stripped) { return false; }\n\n  // CPF must have 11 chars\n  if (stripped.length !== 11) { return false; }\n\n  // CPF can't be blacklisted\n  if (BLACKLIST.includes(stripped)) { return false; }\n\n  let numbers = stripped.substr(0, 9);\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n\n  return numbers.substr(-2) === stripped.substr(-2);\n}\n\n/**\n * Generate a random CPF.\n *\n * @export\n * @param {boolean} [useFormat] if `true`, it will format using `.` and `-`. Optional.\n * @returns {string} the CPF.\n */\nexport function generate(useFormat) {\n  let numbers = \"\";\n\n  for (let i = 0; i < 9; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n\n  return (useFormat ? format(numbers) : numbers);\n}\n"],"sourceRoot":""}